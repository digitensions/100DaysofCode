We recently covered 10 tips that every flask developer should know. But we left on a pretty big group in the Python web space there Jango developers. And this one's for you, so I've invited Bob elder Bos who's been running his SAS business on Python and Jango for several years now to share his tips and tricks for working with Jango. This is talk Python to me. Episode 277 recorded July 19 th 2,020 welcome to talk Python to me, a weekly podcast on Python. The language the libraries, the ecosystem and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at Kennedy. Keep up with a show and listen to past episodes at talk, Python FM and follow the show on Twitter via at talk Python. This episode is brought to you by La node. And us have you heard about the 100 days of code challenge it's a challenge where you write code for an hour a day for 100 days. It's helped many developers finally master programming, but it can be hard to know what to study or have resources to focus on that's why we wrote not one, but 2 100 days of code courses, 100 days of code in Python, which covers mostly pure Python and 100 days of web in Python which covers a whole spectrum of web frameworks and concepts if you've been thinking about taking the 100 days of code challenge, be sure to visit training. Talk by than M and check out our courses. They are the 100 days of projects and lessons with a tidy bow on top. Just for you, Bob. Welcome back to talk by then. My Thank you, Mike it's nice to be here, hey, man it's good to have you back. Good to be catching up with you. You know what we should be doing is we should be catching up in Pittsburgh and having a better. But instead we're meeting on the podcast and Skype and that second best. Yeah, there was no pie on this year. Robin Robin, I know. I know you and Julian both had flights from quite far away to come. Hang out there and it didn't happen, it didn't happen. It will happen next year. They will it's hard to see it now. But life will go back to normal. Mostly. I think eventually we'll get this whole deal. Figured out, but right now it's a big chaotic. So let's just maybe check in. What have you been up to since the last time you were on? We had you on two episodes before you're on 140 which was a big one where we kind of met each other and whatnot. Talking about 100 days of code projects ultimately, we went on to write a couple of courses, the 200 days of code for Python and web Python stuff together and you're. Also on up to 224 12 lessons from 100 days of web, which is sort of ties into that as well. So it seems like you're on with the tips here that's a good set of topics, yeah. Dang always on the plus form. So what do you been up to since back then? That was back in 2,019 about a year ago. 2,019 okay, so obviously the platform is still growing. That's all in Jango not everyone knows what the platform is right. So tell people about your Co challenges platform and what's going on there because this is the place that you've been running. How long you been running Co challenges for since the end of 2,017 right, so three years of running production level Jango stuff running on Heroku and doing other interesting things. So a lot of the tips are sort of pulled out of that. Experience, right, yes. So it's on their coach challenge. Yes, and it's a platform where people can learn Python through practical exercises which we have almost 290 now and yeah it's pretty exciting and learned a lot of angle there and what's going on for the rest. Well, as you already know, I will Python developer at Oracle until next week, actually next week, which is actually three weeks ago due to time shift because we speak in the future or the past or something like that but, yeah, so from the time of recording you're just about to wrap up your time and Oracle, yeah, yeah, and going full into Pi bytes, which is pretty exciting, congratulations, congratulations that's so awesome. So I think some people would consider a dream, right? You've made it to the point where you built something curated over time and now it's strong enough to be your full time job, which is fantastic. Yeah, it took three and a half years. Is that part of that overnight success that just took 10 years type of thing. Yeah, I know it's daily work, right it's a lot of consistency. But, yes, going full on that right now. Awesome so, congratulations and thank you. That just means you're focused more on making your platform run well. And obviously grow as a business. Like the secret that a lot of people don't learn until they try. Is that running? A successful software business is like technology. So there's a lot more to it. But you still get a focus on your gang side and make the platform even better. So that'll be a lot of fun. Yeah it's a platform. And we do coaching. So we also help a lot of clients with their Jango that's really nice. That way, awesome. Alright, well I'm looking at the notes that we put together and there's a lot of tips that we got to go through so much, we trimmed it down. So we're going to see if we keep it to 10 plus some unspecified number of bonus items as well. When I think of Jango this first tip that you have. This is like one of the main things that I think of is like, it comes with these building block pieces that say Flash. Com, pyramid and fast API and whatnot. Just don't come with like admin back end. Yeah that's where we're going to start. Yes, so Tango clearly comes with batteries included and some people actually don't like that because they want to roll their own. And they think it's opinionated, I happen to like their preferences. And one of those well known building blocks is the admin interface and it's pretty impressive. With a few lines of code, you can just add your model in an admin API file. And you have to complete crowd interface which is probably not for the end user. But as a maintainer of the site it's pretty convenient and it's. Also very easy to extend it. So, for example, taking an admin class here, you can define some search fields, which makes those feel searchable. You can even have autocomplete fields which they integrated the JavaScript. You can overwrite to get query set. And, yeah it's a nice way of inheriting from the admin model admin class. And, yeah, so it comes out of the box. Just I kind of think of it as like Google sheets or something for your database right where each table is like a tab or a sheet in the workbook. Or whatever the terminology of Google sheets is but the tab at the bottom, right, something not necessarily the same UI. But that idea that you have, like a grid over top of it. But what you're telling me here is I can go and drive special classes that are tied to the various tables for the models more specifically and it lets you search different aspects of it it lets you cool auto completion. You could also say, like, limit. How many items come back in your search results per page. So you don't get a million or something like that, right? Yeah, or you can do a list filter, for example. And then certain columns at the right side of the page. You can filter on them by clicking just with one line of code. So there's really some cool functionality. And I think maybe in the show notes we can link to a jingle admin cookbook. I use a lot, which is like 50 or so. And I might have mentioned that before, actually on Python bites. And I learn a lot from that book it's like 50 pages. Yeah, very workable, super cool. Another thing you can do is you can write a function called. Get query set and actually do things like rejoin or do a joined queries against other things because otherwise you may end up with, like the N. Plus, one problem of or do one query, then everything that comes back. You have to do more queries per item to try to fill out the details. Yeah, I will talk about that in one of the tips, yeah, yeah, awesome that's super cool let's see what else do I want to say about that? You know, was it you? I think it might have been you either. You or Dan Bater from real Python. Talking about using this to actually trigger events as you interact with the admin. Was that you Yeah, I think that was me. Yeah, yeah, yeah. So tell us, I think that's pretty related to people by that that's pretty cool. We spoke about that on Python bytes, yeah. I think what we did was in one of the admin models. So parity safe method. And then see if the object was created and only then do a certain action like emailing people. But in hand side that's probably better to do with a salary task. But it's an example how you can override those methods and do certain things pretty easily. Yeah, very, very cool. Alright, number two or magic. Yeah, well, Tango comes with its own or object relational mapper and it's kind of a proxy to the database. So you don't have to write SQL yourself. Although I do I'm such a fan. Well, you've worked at Oracle didn't you I'm such a fan of or actually or in the new sequel world. Maybe ODMs or some. You know, like R might not necessarily make sense. You know, there's so many issues you can run into. If you don't use Parameterized queries, little Bobby tables and all those issues. And just like, if you get the rock queries back and you pull different values. And sometimes you forget to convert this thing to an integer and it's just a string that has an integer in it. So there gonna be all these little weird edge cases right or with or that kind of it's like a layer that just separates like how your data should be transformed and I really love it. I think it's great. I know 100% work all the time. Right? There's places where it doesn't but that's not, you know, like most of the time it's a beautiful thing. Yeah it's a nice obstruction and it's way easier to use and more elegant. I would say, it's how Jango has it's pretty Pythonic and you have those helper methods. Like, for example, get object or 404 and it retrieves the object. And if not for exception. Yeah, exactly equivalent response, right? So that might be exactly what you need. And it's just one method it's very concise, right? So if you just directly went to the objects and said get me something where the primary key is such and such. You would get an exception potentially, but it might say an exception which does not exist. The model does not exist and you don't want to tell the user. What that's going to tell the user is 500 server error. If you don't stop it and so this will translate that to basically effectively catch that exception and raise the up 4 4 which is the proper response. Yeah, that set. The method is in the shortcuts, so that's clearly like a shortcut and there are so many things that can highlight a few. For example, when you get an object, you can also just manually catch. The does not exist. Exception nice one is get or get one score or on the score create which if the object is in the database it retrieves it. And if not it creates it and return to top off the object. And then a bullion create it. I use it in a few places to sometimes I just want the object. And if it's not there. I want to create it and you can do that in one line of code and then the second return a boolean that created you can then save. All does created to one thing. Or if it's just not created to another thing. And again, it's a shortcut, interesting it's like a proactive Upsert update or insert. But the other way, yeah, yeah that's really cool. Alright, what else is getting here? Use filter a lot you can also use exclude. And then there are those need English like methods like first. So, for example, model objects first or last or even preparing I read about earliest or latest and those read like English and they do exactly what you expect them to do. Right? So the trees like English like Python then with Aquarian, for example, if you're filtering, you can use under double underscore to for example, you have fields and then you can do under score. And the score contains is that, like, a, like percent exactly. Yeah that's the sequel language. Yeah, yeah, just to highlight the syntax. That is with double underscore. And you can even link to other models. If you go through underscore underscore and then the foreign key fields. And then on the score on the core attribute. But of course, as we said before, we have to be careful with doing a lot of queries there. But sometimes you just need to reach out to linked models, right? Yeah, then if you want to do like more complex queries, you can use the uppercase, Q the object. So you could do if one field is this. Or if another field is that so that's a way to concatenate certain conditions right, because a lot of times you'll end up. You can use filter and put multiple parameters but you're going to end up with an end, which is exactly that's a good point. You don't you don't always want. Sometimes you do. But if you don't filter is not going to help you that's a great addition. Because exactly if you do like filter attribute equals come another attribute equals their end. And with a Q, you can do an R. It sometimes it's convenient. Yeah, and then we have annotations. So, the group by. So, for example, I have a tango tip. We might be able to link to it. Maybe in the show notes how to get how we got the most common user names on the platform which happen to be David Daniel and Michael just another programmer names like that? Yeah, I guess so interesting. I feel like we almost gonna have to create some gifts of your little code send like link to them, right? We could do it. We can totally do that. Yeah, and also this one. What I really like that. How the code is laid out over multiple lines. As I guess black would do it and you're looking at the same code. Right it's pretty elegant. I think it's Super elegant, yeah, I really like it. And I feel like I write Jango RM code all the time. Even though I don't use Jango nor do I use a relational database that's weird, right? And the reason is I use a Mongo engine, which is the Orm ODM for MongoDB. But it's modeled on Jango or so like it's almost identical as much as it can be be a non relational. So, anyway it's a really nice API. I do like it. These are cool, yeah we'll put the gist of how you got the most common user name or first name out of your users that's cool. Okay, I guess. Hand in glove with Orms DMs is the models that define them, right? Yeah, nice segue, right? The three is the model. So let's talk a little bit about the models. A few tricks they're picked up auto now. Add an auto now. Which are keyword arguments to model fields? Is this like I have a date time like a created date or last updated date or something like that exactly. So if you have an added and an edited field, then the auto on the score now on the square about add the date upon creation. So typically the edit and the auto on the score now will update every time. The roll is updated, so that's a nice and easy way to keep track of those dates that's the rest, yeah, yeah, yeah that's sweet. I love the auto now versus I love the distinction as well. Because sometimes you want it just a default when it's created other times like last login or last updated for a CMS page or something. That would be what you want, yeah, and you don't have to write any code. Those are just attribute stuff coming. That field is to use. Then we have no versus blank on a field and the distinction there. Is that if you say null equals true? Then the field can be empty in the database, right? And if you say blank equals true, then it can be empty on the form. Right, so if you don't say blank then and use a jangle form, it might still think that the field is required in a database. So notes for the database and black is for the form that's the easy way to remember it, okay, yeah, underscore delete is an important one because if you link models together and you say on delete equals models cascade, then it will recursively when you delete a record ultimately to related records the records in the related or linked tables. So, for example, maybe a code challenges there's a user. The user has done a bunch of challenges. You've saved the results, maybe some other stuff about when they logged in. If you delete the user and you have a foreign key relationship, it might even freak out, right? It might say no, this relationship is required you can't delete the user because there's entries in the challenge results or whatever. And this way it'll wipe out the entire tree, like following those relationships, right? Yeah, exactly, and this deletes all their stuff, right? So I'm castigating deletes have always scared me. I was like, almost never turn them on if I ask them just like, so that could go a long way. That could take more down with it than I actually intended. But it's very valuable and useful and I totally get it, but it's cool. If a user wants to leave the platform, right, we have to delete all their data. So I still do it manually in Jango admin delete user. And then it shows you all the objects that's going to be deleted already sure about that. I always look like a second time, is that indeed? And, yes, it all ties back to the user. So you don't want to delete the user and have all kinds of ghost objects in the database potentially. So it's actually useful. But if you want to keep the records, you can. Instead of models cascade, you can use models set null and then it keeps the records. But where the foreign key was user. It sets it to null. I see the relationship is not broken. Database is corrupted sense, but it just Unwired it. Yeah, it makes like there was a user link. But now it's not like it's this portion of talk. Python Amy is brought to you by a node, whether you're working on a personal project or managing your enterprises infrastructure. And has the pricing support and scale that you need to take your project to the next level with 11 data centers worldwide, including their newest data center in Sydney. Australia enterprise grade hardware s three compatible storage. And the next generation network, no delivers the performance that you expect at a price that you don't get started on the node today with a 20 dollar credit. And you get access to native SSD storage 40 gigabit network industry leading processors. Their revamped cloud manager at cloud anode. Com root access to your server. Along with their newest API and a Python CLI just visit talk by than one FM anode when creating a new node account and you'll automatically get 20 dollars credit for your next project. Oh, and one last thing they're hiring go to Leno. Dot com careers. To find out more. Let them know that we sent you. Yeah, my current system. If somebody delete their account. We have a deleted users table next to our users table. And then we just null out all the stuff that identifies them. But we still have the ID. So if I go back and say this user did this thing, I can still trace back that ID and go. Oh that's actually a user that used to exist who deleted themselves that's interesting. Yeah that's cool. Because you do have the the original data. Yeah, but if you're happy to make it go away it's really handy. Because with relational stuff it's really hard to. Like. All right, well I'm going to traverse all the relationships. And how do you unwind them so that the database will actually accept the delete. Right, so this is really nice. I want more model managers right what's up with that. Yeah it's an example that you can define your own model or query for example here like we can link to it forecast a manager and it has a latest method and it gets the latest forecast date or does any query really. And then you can just call that method on the object model objects your method. So it's kind of a nice way to not have all that query logic interview potentially. But have that in the model where it should be. And then it's like a property right where you do a bunch of complex stuff. And then it's just instance your property name, which is very clean. Right right at once and use it in other places without thinking about it, right? Yeah, and then, again, a tree like English and that start that logic and the model, beautiful and matter classes, which are not really matter, class. Well, I guess they are, but you can to find the base of meta not Python meta you can make a class meta in your model and I don't use it for many things. But for example, I think most common example is that you can define the ordering there. For example, you can say, edit and then in your admin or whatever. Whenever you a query that model is then the objects show descend in the sending order. Right, so the default sort if you don't specify one. Yeah that's really handy. Nice, nice, alright. So far. What we've been talking about? Besides my little diversion to Mongo engine, which is not a very common use case has been mostly Jango specific. But this next one that you got here. I feel like a lot of the frameworks have an equivalent, but a lot of people probably don't use them regardless of the framework there. And and that's the debugging tool bar. Right, so going more into the developer tool set, which has been very useful it's a plugin. So you can install it. You add it to the installed apps, I believe. And I think there's a middleware as well, so a couple of two or 3 settings. And then of course, you load it. Only if you are developing locally, which typically means when your debug is set to true, not in production. That is super super important. There's tools out there. That will scan websites for the presence of these debug. Two months and try to pull them up it's bad news to have them out there. So, yeah there's been a lot of vulnerabilities around this actually. And those are important and easy tweaks, maybe a little segue. For example, you have, like, the default admin slash admin that's super easy to find, right? So it's very easy to in your URLs to make it like my back end. And then make it a little bit more hidden, right? Well, yeah, exactly. I mean, I don't know how many people have pulled up the logs for their website as in the request logs live and just go to the server and tell your logs or whatever you will see untold number of requests for various, PHP pages and node JS pages and whatnot. It has nothing to do with your site. They jus like here's the five most common back ends. You know WP, admin dot, PHP and whatnot, right? They're just looking for them. So surely they're looking for Jingo admins as well. So, yeah, Mark, have it a bit the security? But the main reason I pulled up the debugging, toolbar here was a story performance story on some pages. They became pretty slow and it could be more data, more users, but actually, then when I start looking at those pages, how they loaded with the debugging toolbar. I saw that there were actually hundreds and hundreds of queries happening. And that was imagine that would be slow. The servers on a different. The database is on a different server physical server or virtual server? I just got the network latency and all that, right? Yeah, and I was actually because I was not using select underscore related to link and models in an efficient way. So when you use select related, that makes one extra query to link up to two models. But then every time you access for an attribute. So to say, it's already there it's like a Pre cache. So once I got that in place, then the page become super fast. But the main point was that the debugging tool bar made that super easy to diagnose it? Yeah, and I think probably hearing the word debugging to a bar. A lot of people who've not. What is this annoying thing? That's on the side of my website to make this go away, right? They haven't really explored it. It does catch errors and to me that's the least value that the thing adds the debugging part is completely. I don't know I have other tools that tell me that you can just look at the output in the stack trace. But the real value is in the performance. You can check off things like track. The performance of the actual profiling level of your code and show me where the time is being spent and then also into the database. Right? These are the queries that are happening on this page. And how many and if you see like, Oh I'd expect two or 3 and there's 500 you like? This is really broken let's figure out why we're going and getting its second table over and over and over again, exactly? Yeah, so Flash has an equivalent one of these. He has an equivalent one of these they're awesome. You should definitely check them out don't deploy that production, number five. Yeah, I have extending the user model and I linked to an article from simple is better than complex, which is a great angle block and it's more about strategy. Like when you start a project and inevitably going to store more data on a user, right their preferences, their profile settings and you have to kind of think like how you're going to do it from the start because Humber, another has quite an impact on your code. So the article has four methods proxy model. The one the 1 with a profile table and two forms of extending the abstract user base class and especially those last two options are really. You want to do only from the start. And I believe before running, the initial migration, but I would have to look that up for the platform. We actually went with the one to 1 model. The profile model which might cost a few queries there, but it has never been ready. A performance issue does lead to pretty easy to maintain code and we use a signal actually. Or I think they're called signals, which is interesting to highlight that. When the user model gets created, you can use the receiver decorator with a post safe and then write literally three lines of code that the profile object gets created. Once. The user object is created. So basically, when a new user signs up through your jangle app right and so if you need one table like you have a preferences table in a user table, whatever you create the user, you want to automatically have the the preference is created to default or whatever so you can wire it up. Basically an event that is triggered through the or that. When you first create one it's going to set this up and it's going to initialize it with one of these? Right, correct, yeah. And I think it's a nice trick to know about, like, how you can signal one model to another and have the other model do something based on the other one. I think that's a useful. But I think an overall, general principle that's really? I found really super valuable around. These kinds of models and database stuff is as much as possible. Use the Orm to do the default thing like the ad. Add now or auto, no auto now. Add that kind of stuff, right? So when I create the object, if I don't set, anything a whole bunch of stuff will get filled out and only the things that I have to specify. Do you have to actually go as opposed to always updating the updated time yourself or something like that. Right? So as much as you can lean on those things and this is like Ross model version of that. Yeah, so usually when you want to do something, the RM has a default way. So, again, it comes back to the previous or tip number three. I know the RM pretty well, right? Yeah that's for sure. I don't know how you feel about. When I go around the Internet. I feel like there's a lot of sites that just don't understand how their web app interacts with their database. You go there and it takes like six seconds for the page to load. Or you go there and there's like four parts of the site that are like spinning little Ajax things for, like, five seconds you're like, what is wrong with you? It can't be this cannot be this slow? It just cannot don't care. How many million records you have? You got to build us an index and make this a little bit faster than this, right? And just, but it's ongoing, I think that's a good point. The database index is super important and you can attribute other attributes. You can just specify there? Yeah, yeah, I think indexes are a big deal. Definitely. Indexes are like magic speed dust. You can throw in your database they're beautiful. Yeah, yeah I'm not sure the ratio, though. It can be 100 times faster right it's so easy to say, 100 times faster it's insane. Yeah, and it's like one little 1 index equals true type of stuff, right? So, so simple. But people overlook it. So, yeah, especially in the enterprise. But enterprise apps, there are always hammering on indexes that's very I can imagine. Alright, what number six class based views? Yeah, so with class based views, these are basically one class corresponds to a URL. But it has different functions to respond to the different http. Verbs like get post. Put that kind of stuff. Is that what these are? Are they different? Yes, I would have to look up the exact classes, but you have typically like list view detailed view which then tie into the crowd operations. Yes, right, so you can even have one for head, which is not that common. But sometimes if you're looking for the browser looking for, should I actually download this thing. Tell me the E tag last modified sort of thing. So I know whether or not my cache is still valid, stuff like that. Yeah, very cool. Okay I'm kind of torn because I'm looking here at one of the apps for the 100 days of web where we showed function based versus class based and I like them. Both because function based you kind of see what's happening that you pull all the objects and you render a template. Would give it a dictionary of things. You want to render in the template. So that's to me that already looks pretty Pythonic and compact. But then if you compare the class based you see all that inheritance happening, for example, we have a quote list which inherits from list view, which then is that magic superclass with all that default behavior, which is cool. If you know very well, but it can also be hiding a lot of stuff away. So, for example, the list view, the only line there is model equals quote which is saying build me a list view around that model and then stuff magically happens, right? So it's cool, but it's also hiding a lot of stuff potentially. Yeah, yeah, I hear exactly what you're saying. I feel kind of the same way, but it's definitely inheritance and you can override certain methods. So if you know, well, it's pretty elegant and robust, nice number seven. This also feels very much like the batteries included side of the Jango story. Yeah, I call it minus Pi and I guess it's gonna be an episode in itself, right? Yeah, pretty much. I just saw that. The highlight, if you I would just say, like meta things, how you manage well that's why it's called manager by how you manage a dangle app? Important is to migrate. Of course we use it. If you start a gang up you run migrating. A ton of stuff is shown because it comes with a lot of models. The user authentication stuff embedded. But for example, you can use take initial on migrate. And then if the database is kind of further ahead and there's already stuff there. So it's out of sync, then fake initial is a way to kind of tell Jango well, if it's already in the database ignored which can be useful if your database is out of sync, you have load data for example, if you want to have a bunch of data in your initial database it's sometimes it's referred to as pictures and you can give it a JSON file and Pre populate our database which can be useful. Then we have shell, which is cool because if you do, Python manage up pie shell to drop into the jangle shell and you can play with the or directly. So you can do like from models, import bite. And then you can do bite objects account bite objects last, whatever or stuff. So it's a nice way it's like a Repple for your web app, rapper, your for your app. And you can play with the objects there it's pretty useful. Yeah it's really handy. Because if you work with the RM, you might have some of these auto like linking auto features that set values, and if you flip over to the raw database and then all of a sudden you lose all that stuff that you set up to help you kind of manage and make sure it's all consistent. Right this way. You can kind of script around in there. But with that safety or whatever you call it? Yeah, exactly, and then as you load in your production database, you can actually do that on your live database. So that's pretty cool, useful. You want to debug something managed up Hi test to run the test. Much more to say about that than most people that choose Janko will know create Super user. So that gives you a bunch of prompts to create a user with all the permissions, which is useful to have to quickly look into the back end. And the one I really like lastly is the angle commands. So you can write your own kind of use it for Cron jobs. For example, you can write a command, which is inherent from base command and you overwrite the handle method and then typically, for example, we use it to example. We have people on the platform doing trials and the trials is two weeks, right? So after the two weeks there, they're done with the trial. And we have to take a couple of settings on their profile to get rid of that access. And so we have a command that queries all the profiles profile objects or people that have an extra trial. And then in Paris, like, when they started to trial with daytime now or time zone now and does one action or remove the access and that's a script. That's under the app. Management commands script and then in a row, we use scheduler. And then we say, well, every day at nine a M run that script. And if you have a script and manage management commands then manage up. I recognize that as a command. So if you put a script in there, then you can use it through the management interface, which is pretty cool. So you can write your own grown jobs. Basically, that makes it. Yeah that's really nice. So it basically lets you just add these commands and then tie it into the Heroku scheduler or celery or something like that that it becomes this cool. Cron job that knows all about your site, yeah, so in rock schedule, we would define every day at nine am run Python. Manage a pie and the name of your comment, which is the name of your script and just like that, nice. The weekend was here on the note. Template some template code. How that would work? Maybe we can make a just of that as well. Yeah, I think we have to make some just. Alright, number eight is all about middleware which is code that runs. That might see the request before it actually hits your interview methods or action methods or potentially changes them after it's already been processed and decided. But before it actually goes out the web server to the end user, like before and after out of it, right? Yeah it's not super common, I think. But it's a nice way to have some sort of global layer in your pipeline in the request pipeline of tango and practical example. How we used it on the platform was to remember when we had to make those GDPR changes like with the regulations and stuff. Yeah, I know. We talked about this and we all had to do weeks of rewriting stuff to make sure even though it was in the same vein, it wasn't technically matches every rule. So we had to go and go through all that and make sure there was will be another episode the stories. Yeah, from that one. So we made all these changes and we have to have some sort of form that already 10 users or more to have them kind of say yes to this. At one time they had to have like another acknowledgment. Next time they visited the site make us where they came into. Not through the login flow or whatever because they were already a user, right? So they went through a registration flow. So we couldn't put it just there. We also had to do for the existing user. So we wrote a middleware that redirected that kept track. If they hat or consent at their consent on their profile. And if not, it would redirect them to that page to that form, basically where they would get their consent. And yeah, it was a nice way to enforce that login that sorry that redirect based on a profile setting basically, yeah, so middleware was used perfect there because it's kind of ruthless as it sits in front Itthat's a really, really good point, that it's ruthless. And in a good way. In a sense. Like, if you were to think okay, well, users need to make sure we got to make sure they accept the GDPR at this point before they go on. So let's check where they go. And perform a bite where they view their solution. Maybe where they view their account and where they log in. And there might be some other part of the site that you forgot about, right, and in addition to just having to modify those places it's super easy to forget. One weird edge case. But with middleware every request that hits Python. This Jango hits this thing, right? And so there's no escaping it you've got to accept the thing or you get direct. Yeah, exactly, and Ah, I also linked here to cool article again from Vitoria where he wrote a bunch of middleware to catch for any exception that is handling. It goes at the stack overflow it's called the stack of exception troubleshooting and only in debug mode. Of course it would list the dump. The stack overflow answered. Oh that's incredible I saw just a like. This is so cool that's crazy. Such a cool use case. So I just want a wild use case. How interesting I'm glad your link I to that. Yeah, the two places that I use that I'm really actively aware of using middleware my sites and your pyramid has middleware as well in last and so on one is for things like century where it's looking at for any unhandled errors. And instead of just letting the server 500 page. Go back to the user it'll catch it, report it and then send it on right, so it'll gather up all that information. And you basically just register that you don't have to do a lot. And the other one is this thing I'll just throw on the bonus round. Really, really quick is a thing called secure pie, which will add all the headers that you should be adding for security. I do not allow my site to be embedded in an iFrame on another site right in the middle where will say I don't care how you got to this request. But we're going to tell you, you can embed this. Whatever this is on another site in an iFrame that's right, yeah it's super cool and it's like, literally, three lines of code to do it. But because it's middleware you know you're not forgetting it the whole site. Just now all of a sudden as the right extra security headers. Yeah, if you're updating 20 views, then it's time to policy. There are a better way, right, exactly exactly? Yeah, cool, cool. So, speaking of better ways number nine, you should just put your API keys and your passwords right inside the code, right? But no, probably no, no. Okay, like committing your secret cases. I was just kidding. Yeah, I know you're Yeah it's no that's an important thing there are stuff that, of course, should keep out of version control. The way to do that is to, for example, have a dot enV file and which you then ignore in your dot get ignore and then those keys are hidden forever. But you still need to reference in your settings up tie. And there are two packages that make it pretty friendly and easy. First one is Python decouple and you import, for example, from the couple import config. And maybe CSV depending the setting and then you can just do secret key equals config. And then the key secret key, which is the actual secret key line in your on file. So magically know that there's an end file reach it in and extract the key from it. So really nice plug in to handle your settings. Okay, this is really cool. I hadn't heard of that one that's neat. I always recommend anybody using change really to just Pip install type couple and make our lives easier. And similarly, for the database you can use DJ database database URL very similar to the couple that it uses the config method. And you can just give it a default equals config and the database, URL. And so as you see here, we can put the snippet in this show. The database is dictionary. Config section is very compact. You don't have to, but obviously you have to have the right database URL string in your file. But it's much easier. That feels right right. Database strings often contain username passwords whose names, host port, all the stuff that you kind of not want to share. Yeah, no, that needs to be all hidden away. Yeah, and one I do have regarding them file. So SDM file is hidden from version control won't show up on GitHub. So I recommend to commit a example file with the same strings with the same keys. But of course, the same. For example, secret key allow host. And then of course, not the actual data. But just as a way to communicate to other developers. Like this is the file we're going to use. So copy this to a dot M file and put in your credentials. There but right it's a nice way to communicate. Actual database connection string here. Type the actual encryption key here. Whatever AWS key there, right? Because the platform has like 20 or 30 of those variables. And if somebody would start developing on that project, how do they know, right? But they said unless you run run server and just start screaming until it crashes. The thing is, though, sometimes those don't crash right away, right? Like, maybe you have a MailChimp API key. And the only time that's going to scream and crash when you actually try to register a new user, not logging in existing on or something weird like that. And then you push it to production and bad things happen. And so silent error that's the worst. Yeah, exactly it's better stuff. Blows up, then goes finance. Like, to send a five right, no error. Should pass it that's right that's right, alright, big drum roll for number 10 even though we'll do a quick bonus round at the end as well, yeah that's a big one. Built in templates tax and filters. Yeah, there there's a bunch of stuff there. I think it's just good to as you're writing a lot of templates where you're going to reference the objects that you pass in from the views it's kind of handy to know how to do that. So I will just go over a few ones we learned about and use. So for example, you have a book list of book objects and you look through them but sometimes there are no books, right? So instead of like, doing eight books, look over the books and else. There are no books. You can actually to four empty and that's kind of a construct that angle, has that if there are no objects, then it goes into the empty block it's just shorter, right. Oh, my God is this properly used for, like an else block on a four for in loop. So it might. It might be, actually. So you've got the syntax. Now, you've got the angle bracket percent four book in books. Li. Curly curly book, right? So that would be. And then you would say N four and that would just print out a bunch of lies with the various books that were in the list. Like you said, you're gonna want to deal with it if it's not there so instead of doing a whole another test and else you can just say, four books, Li, then empty. Sorry, there are no books and four and it's all like one continuous thing that's pretty cool. Yeah, I guess there is no shame in doing. If else Performa twice, I guess. But it's just shorter code, right? It's more elegant. And again it's almost like knowing about this constraint. Yeah, and it's more expressive it's like here's the thing to put when it's empty, not. Oh, I see it means that if this thing is false, then we have nothing. But if it's true, then we can go into its book list inside like it's just it's more clear about, like here's the empty case. So it's more explicit, right? Yeah, yeah, and also you get really nerdy. Like, in those templates. You get to a lot of indents already, because his like that, if you properly formatted it's, so bad that extra fls you can say this it's just nice, right? Two to 4 spaces, less it's good talk, Python, to me is partially supported by our training courses. How does your team keep their Python skills sharp? How do you make sure new hires get started fast and learn the Pythonic way. If the answer is a series of boring videos that don't inspire or a subscription service, you pay way too much for and use way too little. Listen up, talk, Python training. We have enterprise tiers for all of our courses. Get just the one course you need for your team with full reporting and monitoring or ditch. That unused subscription for our course bundles which include all the courses and you pay about the same price as a subscription. Once for details, visit training, Python business or just email sales at talk Python demo. We use a lot is overriding blocks. So in the base template, you can define a blog for example title title of the website. And then again, an example like fast paced views of inheritance. Then if you go into the child template, you can just specify block title and then give it some other content in the base template. You can set the expectations you're going to be blocks of ABC. And then in the tile template, you can then actually populate those blocks. And I think the advantage is that sometimes the title for example needs to go high up in the order of HTML. So you have to kind of the order of the elements on the page. You have to kind of have it in your base template. And so it's a nice way to set it there. And then come back in a child and set it to something else that makes sense, yeah, I love these types of things that I have on all the sites that I run. I have three or 4 that are always there obviously the main content, right? Like whatever the page content is going to be there's going to be one for that. This title one is super important because you want to be able to set, like, literally the the angle bracket title. But there's not really a good way to get into that space from a base template drive template, right it's got to reach in. Poke a hole up there. The two others that I always have are like extra CSS and extra JavaScript. So in this page in this few pages, I need to have one more CSS file or I need to have. Like this one page is going to use views and be like a single page app. But not the rest of stuff on this one I'm going to, like, punch the views stuff at the end or something. Like that that's cool. Yeah, for example. Maybe on your checkout page. You want to have to Stripe JavaScript library, but not on all pages, right? You know JavaScript and then have that script in Port Darryl, though. It might not be nice to have that. I mean, strict HTML, but, you know I'm pretty sure that's probably exactly what I have that's a perfect use case it's something like that only appears in a few pages. You don't want to bundle the Stripe. I don't even know if it makes sense in terms of their API to minify and bundle their JavaScript with yours. It needs to come from their site live. Yeah, exactly. But you want to stick it in the right place, not just randomly in the middle of the page. So these little block overrides are just perfect cool. So never hard code URLs or static files. You can set the static at the top of your template. And then just reference static. And then the relative URL or URL to link to another page on your Rep up, you can just use the URL and then reference the name of the URL. I should set up in your URL I so the example here. We have curly braces percentage and then URL keyword and then the string login and that the matches to the login path in the URL API because we named it explicitly that's a good thing to know don't go hard code URL because you switch domain or whatever. And that will break right, yeah, typical other thing I like is filters. So I have a tag I file and you have a bunch of register filter decorators. So for example here, road one that is new. That receives a daytime and looks if that daytime is less than seven days in the past. So if something is a week old and then we use it in the template. For example, we have bit edit and that's again. The edit field that was without it now. And then we can do pipe is new got into the weeds, but basically applying that is new filter on a date in the template. You can kind of play with it and what we do, for example is to give it a class. And then I guess show a new image on it. Put a little new badge or something on it, yeah, yeah. I guess if we post the snippet that makes more sense. But, yeah, basically it's a way to write a filter. And you don't have to do a lot of if else and complex logic in the template. But you have that actually in the back end. And then you can just use it as a on the object in the template. I guess let's show the code in it. So it's a cool way to basically put a little pipe filtering operator on there, and it runs a little bit of custom code that you write. You write it in Python. It runs it in templates. Yeah, exactly, yeah that's what I stated, I think, yeah, yeah, and you can do anything right, so it's pretty robust. When I'm looking through this you're talking about templates a lot a little while ago we talked about how it was nice to start out with some code when you're creating these pages. Maybe the database is empty. But you want some stuff in the page because it's super hard to actually see what's going on and design the pages without some content. So maybe some kind of Lorem Ipsum that's one that comes out of the box, right? I was so surprised that Jango has Lorem Ipsum built into it must be in high demand, you know exactly now it would be better. I mean, this is pretty good. It would be better if it were hipster Ipsum, which is like ours, but it speaks hipster speak. I guess you would call it like, Stumptown XOXO, Kita semiotics TBR street art Blue bottle before they sold out, pop up, mix tape. And so, of course, Portland shows up in here, yeah. So, anyway, if people are looking for, like, Laura MIPS and filler there's actually like a Laura is operation like empty as well. Go, wow that's really cool, let me see. Let me pull it really quick. Just to see the or tag. It is, yeah. You just do percent Lauren. Count method, randomness clothes percent clothes, curly and boom out. It comes that's beautiful. Yeah, Lauren, two W random. Well I'll put two random letting works. How cool is that? Yeah, so that's really cool, actually. That it's built right into the templates and what's nice is you don't have to have like paragraphs of junk. That you're going to then delete you have literally like just a little bit with, like I want 20 words here. Right, so super cool. Remember when you maybe I was recording one time like a pretty print of how much time a command was posted, like four days and six hours ago. So I actually thought that plus, Humanized, I guess human eye can do that, but it's actually, here on the tax page time since, yeah, oh, really, like it takes a date time and then it will like humanize it. Into that was half an hour ago an hour ago a week ago don't Oh, that is super cool. Yeah, I love to see dates like that. Yeah, no use that on our messages and forums that's Super nice. This is free it's perfect nicer, you know, and don't have to write that logic, right? It just comes into template perfect batteries. Alright, so, are you ready for a bonus round? Yeah, yeah that's still bonus let's do it. Alright, so, yeah. Bonus number one hit us okay, and I've not juice. This that my but playing with it yesterday it's actually pretty cool dango extensions and I will just highlight a few things. She can do you can do Python man the pie graph models and then minus a and then a PNG and it will make a PNG or ping whatever you call of all your models in your it's like a UML diagram of your thing or models basically. Yeah, something like that. And how they're linked together? Yeah, minus super small, um, but, yeah it's definitely more or less. Yeah it's too small, because there's so many models in our thing. But exactly like how you can visualize that I guess if you would you get more developer on board, you talked about shell? Yeah, I mentioned shell before and there's actually a shell on the score. Plus that comes with the general extensions and then you can also give a siphon. And then you drop into an IPython shell. And it also imports all your models so you don't have to important manually. So it's pretty convenient and not part of the gang extension. But I did want to mention is a plugin called Tango tiny MCE which gives you a rich text editing field. And it was tiny. MCE is like a Wizzywig. What? You see what you get? HTML editor right, yes. So this brings it in or something like it makes it easy to use in Jane. So you would use the HTML field. So from an EMC models import HTML field, so it would, of course, cause another migration that's pretty easy to use and it's a huge improvement for the end user. Right? Yeah that's super cool you know, while you're on the topic of that I'll throw one more out. There is simple MDE com. So tiny MC is cool, but I think the ultimate outcome is HTML and simple MBE is a beautiful Markdown editor that's just pure client side JavaScript it has like hot keys in a side by side. Secrete scrolling like, even the mark down the text in Markdown. Even though it's playing text is like the headings are bigger than the code bits and whatnot it's really easy to throw it on a text area. Look, Super nice. Yeah, very nice. Just turn off spell checker it'll tell you everything. He spelled it's fine. All right, our bonus number two keep it flying salary. Yeah, salary really want to mention that, because we're especially in the enterprise where I see Genoise salary it's just always tasks that are that has to be uploaded and being done. Async wise. It makes sense, right? Some things are just not meant to be done in the context of a direct request, I learned this the hard way with my site. So there's a back end. That will let me email the people in a particular course. If there's an update like a problem with the course. I go into that course. The email everybody subscribe here the first time I did. I didn't really pick this all the way through. I went in and I filled out an email hit go. I just sat there and it's fun and it's fun and it it's fun and then eventually it timed out after, like, 20 seconds and crashed. And like, oh, no. So it emailed like thousands of people. But I don't know who actually got the email because I said everybody and it got part way through and then crashed. And so then would I email them again? The first half will get the double, the second half didn't get it at all. I just like, what have I done? What a fool, yeah. So don't do that that's a bad experience but now, your Sunday evening will be shorter, right? Because you know, or and you can. But, yeah, you would have to write some sort of script to see who got emailed or not, you know, yeah, exactly, go. Scrape the logs or something, right, exactly. Well, I guess the other half of the classes is just not getting that message I'm sorry, yeah, so now it's salary, right? You would click send and you would immediately back from the request cycle. So, back at your interface right, dump in the queue. Throw it to celebrate and say start emailing these people it's on the queue that's all happening in the background. So that's then you know, for for other things like heavy, file processing, anything intensive? Send it to you, right? Because the user should be waiting for that, I think. Even for some of myself, I started doing login on a queue I'm just like I don't want this. Whatever this is. I don't want it to be part of this request. I'm just going to throw it over there and we'll get to it in a minute. You know what I mean? Yeah, quick debugging. Tip if you want to debug salary, actually, sometimes it's convenient to not send it to a queue and have it as part of your main process. And you can set salary underscore. Always underscore eager equals true in your settings. And then although then it doesn't go to a test anymore. But it goes straight to your main console. Where you have run server running and it's just easier to debug. So I just want to mention that tip it's not very well documented, but definitely help me. Yeah, very cool. That's awesome, I definitely need to make better use of celery. And what I'm going as well? All right, last one. This 1 I just threw on there. So I'll tell you about it, Bob. I told you that there's all these headers you should be putting into your code into your http response. And if you go look at the OWASP top 10 web vulnerabilities. The open web or group or whatever it stands for. They go through a key track of all the problems right? And some of those can be cross site scripting, embedding your stuff and something that looks like your site like embed. Something that basically is your site in an iFrame but then put a transparent overlay that captures keystrokes for, like, a username and password all sorts of ad stuff like that. So there's all these headers, you should send back, so if you use this thing called secure Pi, which is GitHub com type type. I and I don't know how they got this. But it's Pip install secure, which is incredible that's still available. But the idea is it just on any of these frameworks, including Jango. It will just as middleware just drop in all the changes you need and it's like Virgin go, let's see what does it take that's just there's a super simple integration on how to set it up I got to pull up the docs anyway it's really super easy. And then you get things like strict, Transport Security cross site protection frame options. The same Origin like all those kinds of things that you would like to have that you might forget because it's middleware just like magic. Wow that's pretty cool. And it works with, like, 15 different frameworks or 10 different frameworks it's really, almost no matter what you're using it works with it, you know? Yeah, wow, you just added to middleware with app. Dot secure middleware set secure headers. Yeah, pretty cool it's literally like one function, like a simple decorator that you write more or less simple. Simple metal word, yeah. You just add it in there and off it goes. So it integrates just like you'd expect, anyway it's so easy to add that security and who knows if something else comes out that you're supposed to start doing secure? I might get updated and your site will just magically be more secure and you don't have to think about that. Which is always nice. Pretty cool, thanks. Yeah, you bet. Of course, of course. Alright, well, we did it. We didn't take four hours to cover that. Even though I like to take some time. I mean, you guys who are listening, I can't see there's a ton of details. We kind of skipped over. We could have got into this right? Like you said, we've managed. That pie is probably this whole episode. For example, we've got Jango test that Jango rest framework. We got WAG tail. We got century Dingo. Channels, we haven't even touched on authentication there's all sorts of stuff, right? I mentioned century, you did mention I did, yeah, so not an official item. But you did, yeah, yeah Centry school. There are some 500 are I would have never known about exit or anything it's real life it's so rare they're so rare and they're under weird edge cases. And if you run a website, you should definitely install something like entry or roll bar or something like that. Where you get notifications anytime there's an error at first it's annoying like there's certain things that you can't control. Somebody will try to post a binary thing to some part of your API. Where I expect like Latin characters you'll get like a non Latin Pars area like okay. Well there's nothing I can do about this. But you could start muting those types of things. And eventually you'll be like, oh, I got these errors and literally I would say certainly more than one time I have seen an error come in over one of those channels figured out what was going on fixed it and send a message to the user and said, I'm sorry, I had this error. I fixed it and they're like, well, I was just about to write you. This is crazy that you actually, I didn't even tell you. There was an error. And you fixed it and contacted me that's so cool, right? Yeah, because the 500 error it sucks and they go away, right, exactly exactly. And now you're proactive about it. So that really makes a difference. And even if they're mad. And they go away and they've lost faith. Whatever you know there's nothing you can do to change the past. But your site is better every time you catch one of these errors that you wouldn't have caught. So I read that a lot of times it's like edge cases. But sometimes there's something that might indicate a bigger problem. It's good to rig. Or you deploy something that's bad and all of a sudden it's like gone crazy in your email and text messages are full. You're like wow, I better go check this out is not good. Yeah, it feels a bit safer right to do get push to having that it's a better system. Yeah, yeah, least you'll see the smoke if it catches on fire, all right, well, these are really fun things to cover, Bob. I think people really enjoy them. We can put together some of them just and we'll try to link to the others in the show. Nuts. Yeah, cool well, yeah, but you don't get out of here without answering the final two questions. So, if you're going to write some Jingo code, what editor do you use? Yes, I still use him as well. Go away I always say, it's a steep learning curve right the beginning was very awkward using that editor. But it has this compound effect. And once you get to a lot of shortcuts and you just become pretty fast in it and it's very convenient, but I'm missing out on all the ID features, I guess. Yeah, yeah, that's cool, you want to hear a little them joke? Yeah, yeah, I might, yeah. So how do you generate a random string? Yeah, I know. Trying to act you put a first year computer science student in them and ask them to access good good, all right, and then we covered so many packages here. But maybe just throw out a couple of packages. That you're like man, people need to know about this thing. Yeah I'm going to an abuse effect that we had to leave some out to pull them in here. So we didn't talk about is on the bonus bonus. Dangle all out is a great package or plug into you. Have to really make your authentication and then go easy and Tango rest framework. I still find it a great great package offer to build APIs in Jango. But if it doesn't have to be angled, then let's throw in Python date Util which is really cool. Yeah, Python AI tool is awesome. I love its ability to parse stuff without me to think too much about it. Fuzzy parsing, right, yes, exactly, the partial always works. It is so nice because you don't have to remember Strp time to just throw it into Parse and it magically compares it to the daytime. I'll check right. Yeah, absolutely there's some site. And I can't remember what it is, I know it covered on Python bytes but unfortunately I'm not tracking it down right now there's a site that will let you type in a human readable string and then tell you the format string that goes with it. So nice that's cool. Yeah, so you type like Wednesday at 2 2 P M and it'll actually pull it up. I can't find it well anyway. Yeah that's cool, long story short. This is a great package. If you're parsing things Python date, can I mention that one or if you're working a lot of the databases which obviously happens. So when you when you do web development and Tango for Postgres PG CLI CLI is like way nicer interface than Psql. So just people install it and you'll have a lot more fun for Postgres databases from the command line. Nice do you know one? I know one that you recommended was sequel light browser at slight browser, org, which is pretty cool. But that's just for sequel light have you come across beekeeper studio at beekeeper studio. In my goodness, this is a free open source database guy for Postgres sequel. Light SQL Server presumably also Oracle works on all the platforms and man, it is cool. You can even have saved queries. You typically run. It has auto complete all kinds of stuff. Wow, that looks pretty nice, it looks good, right? Something it looks like you'd want to use? Yeah, like even just an autocomplete query thing. Composure is pretty cool. So anyway, you need to link to that as well. Yeah we're going to throw out the database management stuff that's a really good one. I should definitely put that in there. As well, alright, well, we covered a lot of stuff. What a whirl in. But it was really fun. Yeah, I guess the final call to action people are all excited about what you talked about. Also, maybe they're interested to see how you've taken some of these ideas and put them into action over at code challenges. A final action, and what do people do? Yeah, so we don't have bite exercises on Jango. That was a bit hard. But regardless, yeah it's hard to set up the whole server and database infrastructure in a little tiny bit. Right, that might be possible. I think we do have a flash bite. So I think it's possible because we can install any packages. Owner land us, right? Right, regardless go to CO challenge us and go right. Some code that's the best thing you can do if you want to learn Python and you can also reach out to me by our Slack. So if you go to Pi by Esther on the resources, there's a community link. Anybody join your Slack there? Yeah that's totally for the community. You've got a really, really vibrant and self sustaining Slack channel for Python developers. Like, more than most other places I've seen, which is really cool you've got thousands of people in there, right? Yeah, I think we crossed the 2,000 Mark and it's awesome how people are interacting responding helping each other it's such a nice place. Yeah, they got a code challenge. Does community, is that it? No, there is a Slack but a logo on the platform. But if you just want the link, then you can also just go to Pi bites and under the resources. Drop down there's a community link right right because Slack sometimes the invite link. Yeah don't get me started expires or whatever don't get me started I'm getting joined into slogan, so we just have a dedicated page. And if you go to Pi bite, is that always works awesome? Alright, well, thank you for taking the time to come on here and talk all about this and congratulations on going full time on your project. Awesome, good work, thank you, thanks for having that great fun. Yeah, you bet as always. See you, alright that's fine. This has been another episode of talk Python to me. Our guest in this episode was Bob builders and it's been brought to you by Linode and us over at talk. Python training start your next Python project on the nodes. State of the art. Cloud service just visit talk, Python M and L. I N O D E you'll. Automatically get a 20 dollars credit when you create a new account want to level up your Python if you're just getting started, try my Python jump. Start by building 10 apps course or if you're looking for something more advanced. Check out our new Async course that digs into all the different types of Async programming you can do in Python. And, of course, if you're interested in more than one of these. Be sure to check out our everything bundle it's like a subscription that never expires. Be sure to subscribe to the show. Open your favorite POD catcher and search for Python we should be right at the top. You can also find the iTunes feed at iTunes. The Google Play feed at play in the direct RSS feed at RSS on talk Python. This is your host, Michael Kennedy. Thanks so much for listening. I really appreciate it now. Get out there and write some Python code. 